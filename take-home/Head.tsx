/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/models/head.glb --transform --precision=10 --shadows --keepnames --meta --types
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    hat: THREE.Mesh
    eggy_head: THREE.Mesh
    hair: THREE.Mesh
  }
  materials: {}
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/head-transformed.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <mesh name="hat" castShadow receiveShadow geometry={nodes.hat.geometry} material={nodes.hat.material} position={[0, 1.1233639717, 0.0418835282]} userData={{ name: 'hat' }} />
      <mesh name="eggy_head" castShadow receiveShadow geometry={nodes.eggy_head.geometry} material={nodes.eggy_head.material} position={[0, 1.1233639717, 0.0418835282]} userData={{ name: 'eggy_head' }} />
      <mesh name="hair" castShadow receiveShadow geometry={nodes.hair.geometry} material={nodes.hair.material} position={[0, 1.1233639717, 0.0418835282]} userData={{ name: 'hair' }} />
    </group>
  )
}

useGLTF.preload('/head-transformed.glb')
