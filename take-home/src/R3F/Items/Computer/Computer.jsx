/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/models/computer.glb --transform --precision=10 --shadows --keepnames --meta
*/

import React, { memo, useMemo, useRef } from "react";
import { Plane, useGLTF, useTexture } from "@react-three/drei";
import * as THREE from "three";

const Computer = (props) => {
  const { nodes } = useGLTF("/models/computer-transformed.glb");

  const screenMap = useTexture("/textures/computer/screen.jpg");
  const computerMap = useTexture("/textures/computer/computer_baseColor.webp");
  const computerNormal = useTexture("/textures/computer/computer_Normal.webp");
  const computerEmission = useTexture(
    "/textures/computer/computer_Emission.webp"
  );
  computerMap.flipY = false;
  computerNormal.flipY = false;
  computerEmission.flipY = false;
  computerMap.colorSpace = THREE.SRGBColorSpace;
  screenMap.colorSpace = THREE.SRGBColorSpace;

  const computerMaterial = useMemo(() => {
    return new THREE.MeshStandardMaterial({
      map: computerMap,
      emissiveMap: computerEmission,
      emissiveIntensity: 0,
      normalMap: computerNormal,
    });
  }, []);
  return (
    <group {...props} dispose={null}>
      <group>
        <group scale={1.175} position={[-0.15, 0.175, -0.25]}>
          <Plane
            name="screen"
            castShadow
            receiveShadow
            scale={[1.28, 0.72]}
            material={
              new THREE.MeshBasicMaterial({
                map: screenMap,
              })
            }
            userData={{ name: "screen" }}
          />
        </group>
        <mesh
          name="Computer"
          castShadow
          receiveShadow
          geometry={nodes.Computer.geometry}
          material={computerMaterial}
          userData={{ name: "Computer" }}
        />
      </group>
    </group>
  );
};

export default memo(Computer);

useGLTF.preload("/models/computer-transformed.glb");
