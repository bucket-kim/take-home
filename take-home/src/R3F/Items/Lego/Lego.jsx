/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/models/lego.glb --transform --precision=10 --shadows --keepnames --meta
*/

import React, { memo, useMemo, useRef, useState } from "react";
import { Float, useGLTF, useTexture } from "@react-three/drei";
import * as THREE from "three";
import gsap from "gsap";

const Lego = (props) => {
  const { nodes } = useGLTF("/models/lego-transformed.glb");

  const map = useTexture("/textures/lego/lego_BaseColor.webp");
  const roughness = useTexture("/textures/lego/lego_Roughness.webp");
  const normal = useTexture("/textures/lego/lego_Normal.webp");

  map.flipY = false;
  roughness.flipY = false;
  normal.flipY = false;
  map.colorSpace = THREE.SRGBColorSpace;

  const [clicked, setClicked] = useState(false);

  const material = useMemo(() => {
    return new THREE.MeshStandardMaterial({
      map: map,
      metalnessMap: roughness,
      roughnessMap: roughness,
      normalMap: normal,
    });
  }, []);

  const armLRef = useRef();
  const armRRef = useRef();
  const handLRef = useRef();
  const handRRef = useRef();
  const legLRef = useRef();
  const legRRef = useRef();
  const hipRef = useRef();
  const headRef = useRef();

  const handleClick = () => {
    setClicked((prev) => !prev);

    gsap.to(headRef.current.position, {
      z: clicked ? 2 : 0,
    });
    gsap.to(armLRef.current.position, {
      x: clicked ? -2 : 0,
    });
    gsap.to(handLRef.current.position, {
      z: clicked ? -2 : 0,
    });
    gsap.to(armRRef.current.position, {
      x: clicked ? 2 : 0,
    });
    gsap.to(handRRef.current.position, {
      z: clicked ? -2 : 0,
    });
    gsap.to(legLRef.current.position, {
      x: clicked ? -2 : 0,
      z: clicked ? -4 : 0,
      overwrite: true,
    });
    gsap.to(legRRef.current.position, {
      x: clicked ? 2 : 0,
      z: clicked ? -4 : 0,
      overwrite: true,
    });
    gsap.to(hipRef.current.position, {
      z: clicked ? -2 : 0,
      overwrite: true,
    });
  };

  return (
    <Float>
      <group {...props} dispose={null} position-z={-5}>
        <group
          name="Legoobjcleaner"
          rotation={[-Math.PI / 2, 0, Math.PI]}
          scale={[0.25, 0.25, 0.25]}
          userData={{ name: "Lego.obj.cleaner" }}
          onClick={handleClick}
        >
          <group ref={armLRef}>
            <mesh
              name="arm_L"
              castShadow
              receiveShadow
              geometry={nodes.arm_L.geometry}
              material={material}
              userData={{ name: "arm_L" }}
            />
            <mesh
              name="hand_L"
              castShadow
              receiveShadow
              geometry={nodes.hand_L.geometry}
              material={material}
              userData={{ name: "hand_L" }}
              ref={handLRef}
            />
          </group>
          <group ref={armRRef}>
            <mesh
              name="arm_R"
              castShadow
              receiveShadow
              geometry={nodes.arm_R.geometry}
              material={material}
              userData={{ name: "arm_R" }}
            />
            <mesh
              name="hand_R"
              castShadow
              receiveShadow
              geometry={nodes.hand_R.geometry}
              material={material}
              userData={{ name: "hand_R" }}
              ref={handRRef}
            />
          </group>
          <mesh
            name="body"
            castShadow
            receiveShadow
            geometry={nodes.body.geometry}
            material={material}
            userData={{ name: "body" }}
          />

          <mesh
            name="head"
            castShadow
            receiveShadow
            geometry={nodes.head.geometry}
            material={material}
            userData={{ name: "head" }}
            ref={headRef}
          />
          <mesh
            name="hip"
            castShadow
            receiveShadow
            geometry={nodes.hip.geometry}
            material={material}
            userData={{ name: "hip" }}
            ref={hipRef}
          />
          <mesh
            name="leg_L"
            castShadow
            receiveShadow
            geometry={nodes.leg_L.geometry}
            material={material}
            userData={{ name: "leg_L" }}
            ref={legLRef}
          />
          <mesh
            name="leg_R"
            castShadow
            receiveShadow
            geometry={nodes.leg_R.geometry}
            material={material}
            userData={{ name: "leg_R" }}
            ref={legRRef}
          />
        </group>
      </group>
    </Float>
  );
};

export default memo(Lego);

useGLTF.preload("/models/lego-transformed.glb");
