/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/models/lego.glb --transform --precision=10 --shadows --keepnames --meta
*/

import React, { memo, useMemo, useRef } from "react";
import { Float, useGLTF, useTexture } from "@react-three/drei";
import * as THREE from "three";

const Lego = (props) => {
  const { nodes } = useGLTF("/models/lego-transformed.glb");

  const map = useTexture("/textures/lego/lego_BaseColor.webp");
  const roughness = useTexture("/textures/lego/lego_Roughness.webp");
  const normal = useTexture("/textures/lego/lego_Normal.webp");

  map.flipY = false;
  roughness.flipY = false;
  normal.flipY = false;
  map.colorSpace = THREE.SRGBColorSpace;

  const material = useMemo(() => {
    return new THREE.MeshStandardMaterial({
      map: map,
      metalnessMap: roughness,
      roughnessMap: roughness,
      normalMap: normal,
    });
  }, []);

  return (
    <Float
      floatIntensity={0.1}
      floatingRange={[-0.1, 0.1]}
      speed={1}
      enabled={false}
    >
      <group {...props} dispose={null}>
        <group
          name="Legoobjcleaner"
          rotation={[-Math.PI / 2, 0, Math.PI]}
          scale={[0.25, 0.25, 0.25]}
          userData={{ name: "Lego.obj.cleaner" }}
        >
          <mesh
            name="arm_L"
            castShadow
            receiveShadow
            geometry={nodes.arm_L.geometry}
            material={material}
            userData={{ name: "arm_L" }}
          />
          <mesh
            name="arm_R"
            castShadow
            receiveShadow
            geometry={nodes.arm_R.geometry}
            material={material}
            userData={{ name: "arm_R" }}
          />
          <mesh
            name="body"
            castShadow
            receiveShadow
            geometry={nodes.body.geometry}
            material={material}
            userData={{ name: "body" }}
          />
          <mesh
            name="hand_L"
            castShadow
            receiveShadow
            geometry={nodes.hand_L.geometry}
            material={material}
            userData={{ name: "hand_L" }}
          />
          <mesh
            name="hand_R"
            castShadow
            receiveShadow
            geometry={nodes.hand_R.geometry}
            material={material}
            userData={{ name: "hand_R" }}
          />
          <mesh
            name="head"
            castShadow
            receiveShadow
            geometry={nodes.head.geometry}
            material={material}
            userData={{ name: "head" }}
          />
          <mesh
            name="hip"
            castShadow
            receiveShadow
            geometry={nodes.hip.geometry}
            material={material}
            userData={{ name: "hip" }}
          />
          <mesh
            name="leg_L"
            castShadow
            receiveShadow
            geometry={nodes.leg_L.geometry}
            material={material}
            userData={{ name: "leg_L" }}
          />
          <mesh
            name="leg_R"
            castShadow
            receiveShadow
            geometry={nodes.leg_R.geometry}
            material={material}
            userData={{ name: "leg_R" }}
          />
        </group>
      </group>
    </Float>
  );
};

export default memo(Lego);

useGLTF.preload("/models/lego-transformed.glb");
