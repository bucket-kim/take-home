/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/models/crayon.glb --transform --precision=10 --shadows --keepnames --meta
Author: Blender3D (https://sketchfab.com/Blender3D)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/simple-crayon-1b6548493a5f4c75a585df0c940408d2
Title: Simple Crayon
*/

import React, { forwardRef, memo, useEffect, useMemo, useRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import * as THREE from "three";
import gsap from "gsap";

const Crayon = forwardRef((props, ref) => {
  const { nodes } = useGLTF("/models/crayon-transformed.glb");

  const crayonMap = useTexture(`${props.texture}`);
  crayonMap.flipY = false;
  crayonMap.colorSpace = THREE.SRGBColorSpace;

  const crayonMat = useMemo(() => {
    return new THREE.MeshStandardMaterial({
      map: crayonMap,
    });
  }, []);

  return (
    <group {...props} dispose={null} ref={ref}>
      <mesh
        name="Object_2"
        castShadow
        receiveShadow
        geometry={nodes.Object_2.geometry}
        material={crayonMat}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.5}
        userData={{ name: "Object_2" }}
        onPointerDown={props.handleDown}
      />
    </group>
  );
});

export default memo(Crayon);

useGLTF.preload("/models/crayon-transformed.glb");
